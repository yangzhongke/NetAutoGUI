using System.Drawing.Imaging;
using System.Runtime.InteropServices;

class Program
{
    public struct DEVMODE
    {
        private const int CCHDEVICENAME = 0x20;
        private const int CCHFORMNAME = 0x20;
        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 0x20)]
        public string dmDeviceName;
        public short dmSpecVersion;
        public short dmDriverVersion;
        public short dmSize;
        public short dmDriverExtra;
        public int dmFields;
        public int dmPositionX;
        public int dmPositionY;
        public ScreenOrientation dmDisplayOrientation;
        public int dmDisplayFixedOutput;
        public short dmColor;
        public short dmDuplex;
        public short dmYResolution;
        public short dmTTOption;
        public short dmCollate;
        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 0x20)]
        public string dmFormName;
        public short dmLogPixels;
        public int dmBitsPerPel;
        public int dmPelsWidth;
        public int dmPelsHeight;
        public int dmDisplayFlags;
        public int dmDisplayFrequency;
        public int dmICMMethod;
        public int dmICMIntent;
        public int dmMediaType;
        public int dmDitherType;
        public int dmReserved1;
        public int dmReserved2;
        public int dmPanningWidth;
        public int dmPanningHeight;
    }

    [DllImport("user32.dll")]
    public static extern bool EnumDisplaySettings(string lpszDeviceName, int iModeNum, ref DEVMODE lpDevMode);

    static void Main()
    {
        Application.SetHighDpiMode(HighDpiMode.PerMonitorV2);

        var screens = Screen.AllScreens;

        Rectangle virtualScreen = new Rectangle(
            SystemInformation.VirtualScreen.Left,
            SystemInformation.VirtualScreen.Top,
            SystemInformation.VirtualScreen.Width,
            SystemInformation.VirtualScreen.Height
        );

        using (Bitmap finalImage = new Bitmap(virtualScreen.Width, virtualScreen.Height))
        {
            using (Graphics graphics = Graphics.FromImage(finalImage))
            {
                graphics.FillRectangle(Brushes.Black, 0, 0, finalImage.Width, finalImage.Height);

                foreach (Screen screen in screens)
                {
                    float scaleX = GetScreenScaleFactor(screen, out float scaleY);

                    Bitmap screenCapture = CaptureScreen(screen, scaleX, scaleY);

                    int x = screen.Bounds.Left - virtualScreen.Left;
                    int y = screen.Bounds.Top - virtualScreen.Top;

                    graphics.DrawImage(screenCapture, x, y, screenCapture.Width, screenCapture.Height);
                    screenCapture.Dispose();
                }
            }

            string filePath = "d:/MultiScreenCapture.png";
            finalImage.Save(filePath, ImageFormat.Png);
            Console.WriteLine($"All screens captured and saved to {filePath}");
        }
    }

    static float GetScreenScaleFactor(Screen screen, out float scaleY)
    {
        DEVMODE dm = new DEVMODE();
        dm.dmSize = (short)Marshal.SizeOf(typeof(DEVMODE));
        EnumDisplaySettings(screen.DeviceName, -1, ref dm);

        var scalingFactorX = Math.Round(Decimal.Divide(dm.dmPelsWidth, screen.Bounds.Width), 2);
        var scalingFactorY = Math.Round(Decimal.Divide(dm.dmPelsHeight, screen.Bounds.Height), 2);
        scaleY = (float)scalingFactorY;
        return (float)scalingFactorX;
    }

    static Bitmap CaptureScreen(Screen screen, float scaleX, float scaleY)
    {
        int width = (int)(screen.Bounds.Width * scaleX);
        int height = (int)(screen.Bounds.Height * scaleY);

        Bitmap bitmap = new Bitmap(width, height);
        using (Graphics graphics = Graphics.FromImage(bitmap))
        {
            graphics.CopyFromScreen(screen.Bounds.Left, screen.Bounds.Top, 0, 0, new Size(width, height));
        }
        return bitmap;
    }
}
